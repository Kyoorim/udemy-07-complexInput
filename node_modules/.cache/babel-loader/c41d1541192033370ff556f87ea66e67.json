{"ast":null,"code":"var _jsxFileName = \"/Users/kyoorim/Desktop/practice-coding/udemy-07-complexInput/src/components/SimpleInput.js\",\n    _s = $RefreshSig$();\n\nimport { useState } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst SimpleInput = props => {\n  _s();\n\n  const [enteredName, setEnteredName] = useState(\"\"); // const [enteredNameIsValid, setEnteredNameIsValid] = useState(false); //useState(true)라고 놓으면 첫 화면부터 error문이 뜨지 않아서 맞는 것처럼 보이지만, 사실 논리적으로 보면 첫 시작 시에는 input칸이 비어있는 상태이므로 useState(false)가 맞다\n\n  const [enteredNameTouched, setEnteredNameTouched] = useState(false); // input칸을 건드린 상태에서 유효한지 아닌지를 판별할 수 있는 useState\n\n  const enteredNameIsValid = enteredName.trim() !== \"\";\n\n  const nameInputChangeHandler = event => {\n    setEnteredName(event.target.value);\n\n    if (event.target.value.trim() !== \"\") {\n      // event.target.value === enteredName. 비동기적 처리를 감안해서 한 함수 안에서는 enteredName 대신 같은 이름으로 불러줘야함\n      setEnteredNameIsValid(true);\n    }\n  }; // 사용자가 입력칸을 클릭하고 아무것도 입력하지 않은 채 포커스를 잃었을때,\n  // 입력칸에 반드시 입력해야한다고 에러매세지를 주는 처리\n\n\n  const nameInputBlurHandler = event => {\n    setEnteredNameTouched(true);\n\n    if (enteredName.trim() === \"\") {\n      setEnteredNameIsValid(false);\n    }\n  };\n\n  const formSubmissionHandler = event => {\n    event.preventDefault();\n    setEnteredNameTouched(true);\n\n    if (enteredName.trim() === \"\") {\n      setEnteredNameIsValid(false);\n      return;\n    }\n\n    setEnteredNameIsValid(true);\n    console.log(enteredName);\n    setEnteredName(\"\"); // **useState로 input 초기화 (리턴 문 안 input에 value={enteredName}도 함께 써줘야함)\n    // nameInputRef.current.value=''; 은 작동은 하지만 DOM을 직접 조작하는 방법이므로 바람직하지 않음\n  };\n\n  const nameInputIsInvalid = !enteredNameIsValid && enteredNameTouched;\n  const nameInputClasses = nameInputIsInvalid ? \"form-control invalid\" : \"form-control\";\n  return /*#__PURE__*/_jsxDEV(\"form\", {\n    onSubmit: formSubmissionHandler,\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: nameInputClasses,\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        htmlFor: \"name\",\n        children: \"Your Name\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 57,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        id: \"name\",\n        onChange: nameInputChangeHandler,\n        onBlur: nameInputBlurHandler,\n        value: enteredName\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 58,\n        columnNumber: 9\n      }, this), nameInputIsInvalid && /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"error-text\",\n        children: \"Name must not be empty\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 66,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"form-actions\",\n      children: /*#__PURE__*/_jsxDEV(\"button\", {\n        children: \"Submit\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 70,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 55,\n    columnNumber: 5\n  }, this);\n};\n\n_s(SimpleInput, \"LgiCUeBZKlto+n6NHgnrvDwlEEY=\");\n\n_c = SimpleInput;\nexport default SimpleInput;\n\nvar _c;\n\n$RefreshReg$(_c, \"SimpleInput\");","map":{"version":3,"names":["useState","SimpleInput","props","enteredName","setEnteredName","enteredNameTouched","setEnteredNameTouched","enteredNameIsValid","trim","nameInputChangeHandler","event","target","value","setEnteredNameIsValid","nameInputBlurHandler","formSubmissionHandler","preventDefault","console","log","nameInputIsInvalid","nameInputClasses"],"sources":["/Users/kyoorim/Desktop/practice-coding/udemy-07-complexInput/src/components/SimpleInput.js"],"sourcesContent":["import { useState } from \"react\";\n\nconst SimpleInput = (props) => {\n  const [enteredName, setEnteredName] = useState(\"\");\n  // const [enteredNameIsValid, setEnteredNameIsValid] = useState(false); //useState(true)라고 놓으면 첫 화면부터 error문이 뜨지 않아서 맞는 것처럼 보이지만, 사실 논리적으로 보면 첫 시작 시에는 input칸이 비어있는 상태이므로 useState(false)가 맞다\n  const [enteredNameTouched, setEnteredNameTouched] = useState(false); // input칸을 건드린 상태에서 유효한지 아닌지를 판별할 수 있는 useState\n\n  const enteredNameIsValid = enteredName.trim() !== \"\";\n\n  const nameInputChangeHandler = (event) => {\n    setEnteredName(event.target.value);\n\n    if (event.target.value.trim() !== \"\") {\n      // event.target.value === enteredName. 비동기적 처리를 감안해서 한 함수 안에서는 enteredName 대신 같은 이름으로 불러줘야함\n      setEnteredNameIsValid(true);\n    }\n  };\n\n  // 사용자가 입력칸을 클릭하고 아무것도 입력하지 않은 채 포커스를 잃었을때,\n  // 입력칸에 반드시 입력해야한다고 에러매세지를 주는 처리\n  const nameInputBlurHandler = (event) => {\n    setEnteredNameTouched(true);\n\n    if (enteredName.trim() === \"\") {\n      setEnteredNameIsValid(false);\n    }\n  };\n\n  const formSubmissionHandler = (event) => {\n    event.preventDefault();\n\n    setEnteredNameTouched(true);\n\n    if (enteredName.trim() === \"\") {\n      setEnteredNameIsValid(false);\n      return;\n    }\n\n    setEnteredNameIsValid(true);\n\n    console.log(enteredName);\n\n    setEnteredName(\"\"); // **useState로 input 초기화 (리턴 문 안 input에 value={enteredName}도 함께 써줘야함)\n\n    // nameInputRef.current.value=''; 은 작동은 하지만 DOM을 직접 조작하는 방법이므로 바람직하지 않음\n  };\n\n  const nameInputIsInvalid = !enteredNameIsValid && enteredNameTouched;\n\n  const nameInputClasses = nameInputIsInvalid\n    ? \"form-control invalid\"\n    : \"form-control\";\n\n  return (\n    <form onSubmit={formSubmissionHandler}>\n      <div className={nameInputClasses}>\n        <label htmlFor=\"name\">Your Name</label>\n        <input\n          type=\"text\"\n          id=\"name\"\n          onChange={nameInputChangeHandler}\n          onBlur={nameInputBlurHandler}\n          value={enteredName}\n        />\n        {nameInputIsInvalid && (\n          <p className=\"error-text\">Name must not be empty</p>\n        )}\n      </div>\n      <div className=\"form-actions\">\n        <button>Submit</button>\n      </div>\n    </form>\n  );\n};\n\nexport default SimpleInput;\n"],"mappings":";;;AAAA,SAASA,QAAT,QAAyB,OAAzB;;;AAEA,MAAMC,WAAW,GAAIC,KAAD,IAAW;EAAA;;EAC7B,MAAM,CAACC,WAAD,EAAcC,cAAd,IAAgCJ,QAAQ,CAAC,EAAD,CAA9C,CAD6B,CAE7B;;EACA,MAAM,CAACK,kBAAD,EAAqBC,qBAArB,IAA8CN,QAAQ,CAAC,KAAD,CAA5D,CAH6B,CAGwC;;EAErE,MAAMO,kBAAkB,GAAGJ,WAAW,CAACK,IAAZ,OAAuB,EAAlD;;EAEA,MAAMC,sBAAsB,GAAIC,KAAD,IAAW;IACxCN,cAAc,CAACM,KAAK,CAACC,MAAN,CAAaC,KAAd,CAAd;;IAEA,IAAIF,KAAK,CAACC,MAAN,CAAaC,KAAb,CAAmBJ,IAAnB,OAA8B,EAAlC,EAAsC;MACpC;MACAK,qBAAqB,CAAC,IAAD,CAArB;IACD;EACF,CAPD,CAP6B,CAgB7B;EACA;;;EACA,MAAMC,oBAAoB,GAAIJ,KAAD,IAAW;IACtCJ,qBAAqB,CAAC,IAAD,CAArB;;IAEA,IAAIH,WAAW,CAACK,IAAZ,OAAuB,EAA3B,EAA+B;MAC7BK,qBAAqB,CAAC,KAAD,CAArB;IACD;EACF,CAND;;EAQA,MAAME,qBAAqB,GAAIL,KAAD,IAAW;IACvCA,KAAK,CAACM,cAAN;IAEAV,qBAAqB,CAAC,IAAD,CAArB;;IAEA,IAAIH,WAAW,CAACK,IAAZ,OAAuB,EAA3B,EAA+B;MAC7BK,qBAAqB,CAAC,KAAD,CAArB;MACA;IACD;;IAEDA,qBAAqB,CAAC,IAAD,CAArB;IAEAI,OAAO,CAACC,GAAR,CAAYf,WAAZ;IAEAC,cAAc,CAAC,EAAD,CAAd,CAduC,CAcnB;IAEpB;EACD,CAjBD;;EAmBA,MAAMe,kBAAkB,GAAG,CAACZ,kBAAD,IAAuBF,kBAAlD;EAEA,MAAMe,gBAAgB,GAAGD,kBAAkB,GACvC,sBADuC,GAEvC,cAFJ;EAIA,oBACE;IAAM,QAAQ,EAAEJ,qBAAhB;IAAA,wBACE;MAAK,SAAS,EAAEK,gBAAhB;MAAA,wBACE;QAAO,OAAO,EAAC,MAAf;QAAA;MAAA;QAAA;QAAA;QAAA;MAAA,QADF,eAEE;QACE,IAAI,EAAC,MADP;QAEE,EAAE,EAAC,MAFL;QAGE,QAAQ,EAAEX,sBAHZ;QAIE,MAAM,EAAEK,oBAJV;QAKE,KAAK,EAAEX;MALT;QAAA;QAAA;QAAA;MAAA,QAFF,EASGgB,kBAAkB,iBACjB;QAAG,SAAS,EAAC,YAAb;QAAA;MAAA;QAAA;QAAA;QAAA;MAAA,QAVJ;IAAA;MAAA;MAAA;MAAA;IAAA,QADF,eAcE;MAAK,SAAS,EAAC,cAAf;MAAA,uBACE;QAAA;MAAA;QAAA;QAAA;QAAA;MAAA;IADF;MAAA;MAAA;MAAA;IAAA,QAdF;EAAA;IAAA;IAAA;IAAA;EAAA,QADF;AAoBD,CAvED;;GAAMlB,W;;KAAAA,W;AAyEN,eAAeA,WAAf"},"metadata":{},"sourceType":"module"}