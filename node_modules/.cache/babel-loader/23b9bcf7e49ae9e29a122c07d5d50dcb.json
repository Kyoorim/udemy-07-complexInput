{"ast":null,"code":"var _jsxFileName = \"/Users/kyoorim/Desktop/practice-coding/udemy-07-complexInput/src/components/SimpleInput.js\",\n    _s = $RefreshSig$();\n\nimport { useState } from \"react\";\nimport useInput from \"../hooks/use-input\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst SimpleInput = props => {\n  _s();\n\n  const {\n    value: enteredName,\n    isValid: enteredNameIsValid,\n    hasError: nameInputHasError,\n    valueChangeHandler: nameInputChangeHandler,\n    inputBlurHandler: nameInputBlurHandler\n  } = useInput(value => value.trim() !== \"\"); // //-----커스텀 훅(use-input.js)로 지우는 것 가능해짐 ------\n  // const [enteredName, setEnteredName] = useState(\"\");\n  // // const [enteredNameIsValid, setEnteredNameIsValid] = useState(false); //useState(true)라고 놓으면 첫 화면부터 error문이 뜨지 않아서 맞는 것처럼 보이지만, 사실 논리적으로 보면 첫 시작 시에는 input칸이 비어있는 상태이므로 useState(false)가 맞다\n  // const [enteredNameTouched, setEnteredNameTouched] = useState(false); // input칸을 건드린 상태에서 유효한지 아닌지를 판별할 수 있는 useState\n  //   //-----커스텀 훅(use-input.js)로 지우는 것 가능해짐 ------\n  // //enteredNameIsValid를 useState로 관리했을 때 코딩이 장황해지는 문제를 해결하기 위해 useState대신 const로 관리함!!\n  // const enteredNameIsValid = enteredName.trim() !== \"\";\n  // const nameInputIsInvalid = !enteredNameIsValid && enteredNameTouched;\n  // input이 여러개인 form 전체의 유효성 관리하기\n\n  let formIsValid = false;\n\n  if (enteredNameIsValid) {\n    // ex) if(enteredNameIsValid && enteredAgeIsValid && ...)\n    formIsValid = true;\n  } // //-----커스텀 훅(use-input.js)로 지우는 것 가능해짐 ------\n  // const nameInputChangeHandler = (event) => {\n  //   setEnteredName(event.target.value);\n  // };\n  // //-----커스텀 훅(use-input.js)로 지우는 것 가능해짐 ------\n  // // 사용자가 입력칸을 클릭하고 아무것도 입력하지 않은 채 포커스를 잃었을때,\n  // // 입력칸에 반드시 입력해야한다고 에러매세지를 주는 처리\n  // const nameInputBlurHandler = (event) => {\n  //   setEnteredNameTouched(true);\n  // };\n\n\n  const formSubmissionHandler = event => {\n    event.preventDefault(); // //-----커스텀 훅(use-input.js)로 지우는 것 가능해짐 ------\n    // setEnteredNameTouched(true);\n\n    if (!enteredNameIsValid) {\n      return;\n    } // setEnteredNameIsValid(true);\n\n\n    console.log(enteredName);\n    setEnteredName(\"\"); // **useState로 input 초기화 (리턴 문 안 input에 value={enteredName}도 함께 써줘야함)\n\n    setEnteredNameTouched(false); // 제출 후 에러메세지 뜨는 문제 해결\n    // nameInputRef.current.value=''; 은 작동은 하지만 DOM을 직접 조작하는 방법이므로 바람직하지 않음\n  };\n\n  const nameInputClasses = nameInputIsInvalid ? \"form-control invalid\" : \"form-control\";\n  return /*#__PURE__*/_jsxDEV(\"form\", {\n    onSubmit: formSubmissionHandler,\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: nameInputClasses,\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        htmlFor: \"name\",\n        children: \"Your Name\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 70,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        id: \"name\",\n        onChange: nameInputChangeHandler,\n        onBlur: nameInputBlurHandler,\n        value: enteredName\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 71,\n        columnNumber: 9\n      }, this), nameInputHasError && /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"error-text\",\n        children: \"Name must not be empty\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 79,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"form-actions\",\n      children: /*#__PURE__*/_jsxDEV(\"button\", {\n        disabled: !formIsValid,\n        children: \"Submit\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 83,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 82,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 68,\n    columnNumber: 5\n  }, this);\n};\n\n_s(SimpleInput, \"Xa+G3J09wDM1tBtug/j5wThdouk=\", false, function () {\n  return [useInput];\n});\n\n_c = SimpleInput;\nexport default SimpleInput;\n\nvar _c;\n\n$RefreshReg$(_c, \"SimpleInput\");","map":{"version":3,"names":["useState","useInput","SimpleInput","props","value","enteredName","isValid","enteredNameIsValid","hasError","nameInputHasError","valueChangeHandler","nameInputChangeHandler","inputBlurHandler","nameInputBlurHandler","trim","formIsValid","formSubmissionHandler","event","preventDefault","console","log","setEnteredName","setEnteredNameTouched","nameInputClasses","nameInputIsInvalid"],"sources":["/Users/kyoorim/Desktop/practice-coding/udemy-07-complexInput/src/components/SimpleInput.js"],"sourcesContent":["import { useState } from \"react\";\n\nimport useInput from \"../hooks/use-input\";\n\nconst SimpleInput = (props) => {\n  const {\n    value: enteredName,\n    isValid: enteredNameIsValid,\n    hasError: nameInputHasError,\n    valueChangeHandler: nameInputChangeHandler,\n    inputBlurHandler: nameInputBlurHandler,\n  } = useInput((value) => value.trim() !== \"\");\n\n  // //-----커스텀 훅(use-input.js)로 지우는 것 가능해짐 ------\n  // const [enteredName, setEnteredName] = useState(\"\");\n  // // const [enteredNameIsValid, setEnteredNameIsValid] = useState(false); //useState(true)라고 놓으면 첫 화면부터 error문이 뜨지 않아서 맞는 것처럼 보이지만, 사실 논리적으로 보면 첫 시작 시에는 input칸이 비어있는 상태이므로 useState(false)가 맞다\n  // const [enteredNameTouched, setEnteredNameTouched] = useState(false); // input칸을 건드린 상태에서 유효한지 아닌지를 판별할 수 있는 useState\n\n  //   //-----커스텀 훅(use-input.js)로 지우는 것 가능해짐 ------\n  // //enteredNameIsValid를 useState로 관리했을 때 코딩이 장황해지는 문제를 해결하기 위해 useState대신 const로 관리함!!\n  // const enteredNameIsValid = enteredName.trim() !== \"\";\n  // const nameInputIsInvalid = !enteredNameIsValid && enteredNameTouched;\n\n  // input이 여러개인 form 전체의 유효성 관리하기\n  let formIsValid = false;\n  if (enteredNameIsValid) {\n    // ex) if(enteredNameIsValid && enteredAgeIsValid && ...)\n    formIsValid = true;\n  }\n\n  // //-----커스텀 훅(use-input.js)로 지우는 것 가능해짐 ------\n  // const nameInputChangeHandler = (event) => {\n  //   setEnteredName(event.target.value);\n  // };\n\n  // //-----커스텀 훅(use-input.js)로 지우는 것 가능해짐 ------\n  // // 사용자가 입력칸을 클릭하고 아무것도 입력하지 않은 채 포커스를 잃었을때,\n  // // 입력칸에 반드시 입력해야한다고 에러매세지를 주는 처리\n  // const nameInputBlurHandler = (event) => {\n  //   setEnteredNameTouched(true);\n  // };\n\n  const formSubmissionHandler = (event) => {\n    event.preventDefault();\n\n    // //-----커스텀 훅(use-input.js)로 지우는 것 가능해짐 ------\n    // setEnteredNameTouched(true);\n\n    if (!enteredNameIsValid) {\n      return;\n    }\n\n    // setEnteredNameIsValid(true);\n\n    console.log(enteredName);\n\n    setEnteredName(\"\"); // **useState로 input 초기화 (리턴 문 안 input에 value={enteredName}도 함께 써줘야함)\n    setEnteredNameTouched(false); // 제출 후 에러메세지 뜨는 문제 해결\n\n    // nameInputRef.current.value=''; 은 작동은 하지만 DOM을 직접 조작하는 방법이므로 바람직하지 않음\n  };\n\n  const nameInputClasses = nameInputIsInvalid\n    ? \"form-control invalid\"\n    : \"form-control\";\n\n  return (\n    <form onSubmit={formSubmissionHandler}>\n      <div className={nameInputClasses}>\n        <label htmlFor=\"name\">Your Name</label>\n        <input\n          type=\"text\"\n          id=\"name\"\n          onChange={nameInputChangeHandler}\n          onBlur={nameInputBlurHandler}\n          value={enteredName}\n        />\n        {nameInputHasError && (\n          <p className=\"error-text\">Name must not be empty</p>\n        )}\n      </div>\n      <div className=\"form-actions\">\n        <button disabled={!formIsValid}>Submit</button>\n      </div>\n    </form>\n  );\n};\n\nexport default SimpleInput;\n"],"mappings":";;;AAAA,SAASA,QAAT,QAAyB,OAAzB;AAEA,OAAOC,QAAP,MAAqB,oBAArB;;;AAEA,MAAMC,WAAW,GAAIC,KAAD,IAAW;EAAA;;EAC7B,MAAM;IACJC,KAAK,EAAEC,WADH;IAEJC,OAAO,EAAEC,kBAFL;IAGJC,QAAQ,EAAEC,iBAHN;IAIJC,kBAAkB,EAAEC,sBAJhB;IAKJC,gBAAgB,EAAEC;EALd,IAMFZ,QAAQ,CAAEG,KAAD,IAAWA,KAAK,CAACU,IAAN,OAAiB,EAA7B,CANZ,CAD6B,CAS7B;EACA;EACA;EACA;EAEA;EACA;EACA;EACA;EAEA;;EACA,IAAIC,WAAW,GAAG,KAAlB;;EACA,IAAIR,kBAAJ,EAAwB;IACtB;IACAQ,WAAW,GAAG,IAAd;EACD,CAxB4B,CA0B7B;EACA;EACA;EACA;EAEA;EACA;EACA;EACA;EACA;EACA;;;EAEA,MAAMC,qBAAqB,GAAIC,KAAD,IAAW;IACvCA,KAAK,CAACC,cAAN,GADuC,CAGvC;IACA;;IAEA,IAAI,CAACX,kBAAL,EAAyB;MACvB;IACD,CARsC,CAUvC;;;IAEAY,OAAO,CAACC,GAAR,CAAYf,WAAZ;IAEAgB,cAAc,CAAC,EAAD,CAAd,CAduC,CAcnB;;IACpBC,qBAAqB,CAAC,KAAD,CAArB,CAfuC,CAeT;IAE9B;EACD,CAlBD;;EAoBA,MAAMC,gBAAgB,GAAGC,kBAAkB,GACvC,sBADuC,GAEvC,cAFJ;EAIA,oBACE;IAAM,QAAQ,EAAER,qBAAhB;IAAA,wBACE;MAAK,SAAS,EAAEO,gBAAhB;MAAA,wBACE;QAAO,OAAO,EAAC,MAAf;QAAA;MAAA;QAAA;QAAA;QAAA;MAAA,QADF,eAEE;QACE,IAAI,EAAC,MADP;QAEE,EAAE,EAAC,MAFL;QAGE,QAAQ,EAAEZ,sBAHZ;QAIE,MAAM,EAAEE,oBAJV;QAKE,KAAK,EAAER;MALT;QAAA;QAAA;QAAA;MAAA,QAFF,EASGI,iBAAiB,iBAChB;QAAG,SAAS,EAAC,YAAb;QAAA;MAAA;QAAA;QAAA;QAAA;MAAA,QAVJ;IAAA;MAAA;MAAA;MAAA;IAAA,QADF,eAcE;MAAK,SAAS,EAAC,cAAf;MAAA,uBACE;QAAQ,QAAQ,EAAE,CAACM,WAAnB;QAAA;MAAA;QAAA;QAAA;QAAA;MAAA;IADF;MAAA;MAAA;MAAA;IAAA,QAdF;EAAA;IAAA;IAAA;IAAA;EAAA,QADF;AAoBD,CAlFD;;GAAMb,W;UAOAD,Q;;;KAPAC,W;AAoFN,eAAeA,WAAf"},"metadata":{},"sourceType":"module"}